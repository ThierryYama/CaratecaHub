// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categoria {
  idCategoria   Int       @id @default(autoincrement())
  nome          String    @db.VarChar(100)
  faixaIdadeMin Int?
  faixaIdadeMax Int?
  genero        String?   @db.VarChar(45)
  descricao     String?   @db.VarChar(255)
  pesoMin       Decimal?  @db.Decimal(5, 2)
  pesoMax       Decimal?  @db.Decimal(5, 2)
  graduacaoMin  String?   @db.VarChar(45)
  graduacaoMax  String?   @db.VarChar(45)
  campeonatos   CampeonatoModalidade[]
  modalidade Modalidade
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Associacao {
  idAssociacao Int       @id @default(autoincrement())
  nome         String    @db.VarChar(255)
  cnpj         String    @db.VarChar(45)
  endereco     String    @db.VarChar(255)
  telefone     String    @db.VarChar(45)
  email        String    @db.VarChar(100)
  senha        String    @db.VarChar(255)
  sigla        String?   @db.VarChar(25)
  campeonatos  Campeonato[]
  atletas      Atleta[]
  equipes      Equipe[]
  enderecos Endereco[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?
}

model Atleta {
  idAtleta       Int        @id @default(autoincrement())
  nome           String     @db.VarChar(45)
  dataNascimento DateTime   @db.Date
  genero         String     @db.VarChar(45)
  graduacao      String     @db.VarChar(45)
  peso           Decimal    @db.Decimal(5, 2)
  status         Boolean    @default(true)
  telefone       String     @db.VarChar(45)
  email          String     @db.VarChar(100)
  associacao     Associacao @relation(fields: [idAssociacao], references: [idAssociacao])
  equipes        EquipeAtleta[]
  inscricoes     InscricaoAtleta[]
  idAssociacao   Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  deletedAt      DateTime?
}

model Equipe {   
idEquipe Int @id @default(autoincrement()) 
nome String @db.VarChar(100) 
descricao String? @db.VarChar(255) 
idAssociacao Int 
associacao Associacao @relation(fields: [idAssociacao], references: [idAssociacao]) 
membros EquipeAtleta[] 
inscricoes InscricaoEquipe[]
createdAt DateTime @default(now()) 
updatedAt DateTime? @updatedAt 
deletedAt DateTime? 
}

model EquipeAtleta { 
idEquipeAtleta Int @id @default(autoincrement()) 
idEquipe Int 
idAtleta Int 
equipe Equipe @relation(fields: [idEquipe], references: [idEquipe], onDelete: Cascade) 
atleta Atleta @relation(fields: [idAtleta], references: [idAtleta], onDelete: Cascade) 
createdAt DateTime @default(now()) 
@@unique([idEquipe, idAtleta]) 
}

model Campeonato {
  idCampeonato Int @id @default(autoincrement())
  idAssociacao Int
  idEndereco Int
  endereco Endereco @relation(fields: [idEndereco], references: [idEndereco])
  associacao Associacao @relation(fields: [idAssociacao], references: [idAssociacao])
  nome String @db.VarChar(256)
  dataInicio DateTime @db.Date
  dataFim DateTime? @db.Date
  descricao String? @db.VarChar(256)
  status Status @default(PENDENTE)
  modalidades CampeonatoModalidade[]
}

model CampeonatoModalidade{
  idCampeonatoModalidade Int @id @default(autoincrement())
  idCampeonato Int
  idCategoria Int
  campeonato Campeonato @relation(fields: [idCampeonato], references: [idCampeonato])
  categoria Categoria? @relation(fields: [idCategoria], references: [idCategoria])
  inscricoesAtleta InscricaoAtleta[]
  inscricoesEquipe InscricaoEquipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Endereco{
  idEndereco Int @id @default(autoincrement())
  rua String @db.VarChar(256)
  numero String @db.VarChar(10)
  complemento String? @db.VarChar(100)
  bairro String @db.VarChar(45)
  cidade String @db.VarChar(45)
  estado String @db.VarChar(45)
  cep String @db.VarChar(10)
  campeonatos  Campeonato[]
  idAssociacao Int?
  associacao Associacao? @relation(fields: [idAssociacao], references: [idAssociacao])
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model InscricaoAtleta {
  idInscricaoAtleta Int @id @default(autoincrement())
  idAtleta Int
  idCampeonatoModalidade Int
  atleta Atleta @relation(fields: [idAtleta], references: [idAtleta])
  campeonatoModalidade CampeonatoModalidade @relation(fields: [idCampeonatoModalidade], references: [idCampeonatoModalidade])
  status Status @default(EM_ANDAMENTO)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  @@unique([idAtleta, idCampeonatoModalidade])
}

model InscricaoEquipe {
  idInscricaoEquipe Int @id @default(autoincrement())
  idEquipe Int
  idCampeonatoModalidade Int
  equipe Equipe @relation(fields: [idEquipe], references: [idEquipe])
  campeonatoModalidade CampeonatoModalidade @relation(fields: [idCampeonatoModalidade], references: [idCampeonatoModalidade])
  status Status @default(EM_ANDAMENTO)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  @@unique([idEquipe, idCampeonatoModalidade])
}



enum Modalidade {
  KATA
  KUMITE
  KATA_EQUIPE
  KUMITE_EQUIPE
}

enum Status {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}